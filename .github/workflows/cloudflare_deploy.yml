name: 电表余额监控网站部署

on:
  # 在电表余额查询工作流完成后运行
  workflow_run:
    workflows: ["电表余额查询"]
    types:
      - completed
  # 允许手动触发
  workflow_dispatch:

jobs:
  deploy-to-cloudflare:
    runs-on: ubuntu-latest
    # 只有当触发的工作流成功完成时才运行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: 电表  # 使用与电表余额查询相同的环境
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载电表余额日志
      if: ${{ github.event_name == 'workflow_run' }}
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }}
          });
          
          const matchArtifact = artifacts.data.artifacts.find(artifact => {
            return artifact.name == "logs"
          });
          
          if (!matchArtifact) {
            core.setFailed('未找到日志文件');
            return;
          }
          
          const download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: matchArtifact.id,
            archive_format: 'zip'
          });
          
          const fs = require('fs');
          fs.writeFileSync('logs.zip', Buffer.from(download.data));
          
    - name: 解压日志文件
      if: ${{ github.event_name == 'workflow_run' }}
      run: unzip -o logs.zip
      
    - name: 提取电表余额
      if: ${{ github.event_name == 'workflow_run' }}
      id: extract_balance
      run: |
        if [ -f "meter_balance.log" ]; then
          # 从日志中提取最新的电表余额（使用特殊格式标记）
          BALANCE=$(grep "===METER_BALANCE_RESULT===" meter_balance.log | tail -1 | grep -o "电表余额: [0-9.]*度" | grep -o "[0-9.]*")
          if [ -n "$BALANCE" ]; then
            echo "balance=$BALANCE" >> $GITHUB_OUTPUT
            echo "成功提取电表余额: $BALANCE"
          else
            echo "未能从日志中提取电表余额"
            exit 1
          fi
        else
          echo "日志文件不存在"
          exit 1
        fi
        
    - name: 手动设置测试余额（仅用于手动触发）
      if: ${{ github.event_name == 'workflow_dispatch' }}
      id: manual_balance
      run: |
        # 这里设置一个测试值，仅用于手动触发时测试部署
        echo "balance=285.78" >> $GITHUB_OUTPUT
        echo "使用测试电表余额: 285.78"
        
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: 更新电表数据
      run: |
        if [ "${{ github.event_name }}" == "workflow_run" ]; then
          python update_meter_data.py ${{ steps.extract_balance.outputs.balance }}
        else
          python update_meter_data.py ${{ steps.manual_balance.outputs.balance }}
        fi
        
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 安装Wrangler CLI
      run: npm install -g wrangler
      
    - name: 部署到Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # 创建部署目录
        mkdir -p dist
        
        # 复制网站文件到部署目录
        cp index.html dist/
        cp styles.css dist/
        cp script.js dist/
        cp data.json dist/
        
        # 检查项目是否存在，如果不存在则创建
        echo "检查Cloudflare Pages项目是否存在..."
        if ! wrangler pages project list | grep -q "meter-balance-monitor"; then
          echo "项目不存在，创建新项目..."
          wrangler pages project create meter-balance-monitor --production-branch=main
        else
          echo "项目已存在，继续部署..."
        fi
        
        # 使用Wrangler部署到Cloudflare Pages
        wrangler pages deploy dist --project-name=meter-balance-monitor --branch=main