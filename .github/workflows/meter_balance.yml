name: 电表余额查询

on:
  schedule:
    # 每天晚上21:30运行（UTC时间13:30）
    - cron: "30 13 * * *"
  workflow_dispatch: # 允许手动触发工作流

# 显式设置权限
permissions:
  contents: write

jobs:
  check-meter-balance:
    runs-on: ubuntu-latest
    environment: 电表 # 指定使用哪个环境

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 确保获取完整的git历史，这对于后续的git操作很重要
          fetch-depth: 0

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 安装Microsoft Edge WebDriver
        uses: browser-actions/setup-edge@latest

      - name: 设置环境变量并验证
        env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
          RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
          METER_OPENID: ${{ secrets.METER_OPENID }}
          METER_ID: ${{ secrets.METER_ID }}
          METER_TYPE_REMARK: ${{ secrets.METER_TYPE_REMARK }}
        run: |
          echo "检查环境变量是否设置:"
          if [ -n "$SENDER_EMAIL" ]; then echo "SENDER_EMAIL: 已设置"; else echo "SENDER_EMAIL: 未设置"; fi
          if [ -n "$SENDER_PASSWORD" ]; then echo "SENDER_PASSWORD: 已设置"; else echo "SENDER_PASSWORD: 未设置"; fi
          if [ -n "$RECEIVER_EMAIL" ]; then echo "RECEIVER_EMAIL: 已设置"; else echo "RECEIVER_EMAIL: 未设置"; fi
          if [ -n "$METER_OPENID" ]; then echo "METER_OPENID: 已设置"; else echo "METER_OPENID: 未设置"; fi
          if [ -n "$METER_ID" ]; then echo "METER_ID: 已设置"; else echo "METER_ID: 未设置"; fi
          if [ -n "$METER_TYPE_REMARK" ]; then echo "METER_TYPE_REMARK: 已设置"; else echo "METER_TYPE_REMARK: 未设置"; fi

          # 检查是否所有必需的变量都已设置
          if [ -z "$SENDER_EMAIL" ] || [ -z "$SENDER_PASSWORD" ] || [ -z "$RECEIVER_EMAIL" ] || \
             [ -z "$METER_OPENID" ] || [ -z "$METER_ID" ] || [ -z "$METER_TYPE_REMARK" ]; then
            echo "错误：部分环境变量未设置，请检查GitHub Secrets配置"
            exit 1
          fi

      - name: 运行电表余额查询脚本
        env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
          RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
          METER_OPENID: ${{ secrets.METER_OPENID }}
          METER_ID: ${{ secrets.METER_ID }}
          METER_TYPE_REMARK: ${{ secrets.METER_TYPE_REMARK }}
        run: python meter_balance_action.py

      - name: 上传日志
        if: always() # 即使前面的步骤失败也运行此步骤
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: meter_balance.log
          retention-days: 7

      - name: 检查文件变更
        id: check_changes
        run: |
          git status
          # 检查data.json是否有变更
          if [[ -n $(git status -s data.json) ]]; then
            echo "有data.json文件变更，准备提交"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "没有data.json文件变更，无需提交"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: 提交并推送变更
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # 配置Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"

          # 添加变更
          git add data.json

          # 获取当前时间（北京时间）
          BEIJING_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')

          # 提交变更
          git commit -m "自动更新电表数据 - $BEIJING_TIME"

          # 使用Actions内置的GITHUB_TOKEN推送
          git push
        env:
          # 使用默认的GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 如果上面的推送失败，尝试使用PAT推送
      - name: 使用PAT推送变更（备选方案）
        if: steps.check_changes.outputs.has_changes == 'true' && failure()
        run: |
          # 配置远程URL使用PAT
          git remote set-url origin "https://${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git"
          # 推送
          git push
